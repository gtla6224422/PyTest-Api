{"report": {"environment": {"Python": "3.13.0rc2", "Platform": "Windows-10-10.0.19045-SP0"}, "tests": [{"name": "backend/case/test_getUserInfo.py::test_getUserInfo", "duration": 0.25258969992864877, "run_index": 0, "setup": {"name": "setup", "duration": 0.10111950000282377, "outcome": "passed"}, "call": {"name": "call", "duration": 0.05012449994683266, "outcome": "failed", "longrepr": "self = <Response [200]>, kwargs = {}, encoding = 'utf-8'\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n>                   return complexjson.loads(self.content.decode(encoding), **kwargs)\n\nC:\\Users\\Login\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\requests\\models.py:963: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\Login\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\json\\__init__.py:346: in loads\n    return _default_decoder.decode(s)\nC:\\Users\\Login\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\json\\decoder.py:344: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x0000017DF9824440>\ns = \"<html>\\n<script>\\nwindow.open ('/portal-admin/login.html','_top')\\n</script>\\n</html>\\n\"\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nC:\\Users\\Login\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\json\\decoder.py:362: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\n    def test_getUserInfo():\n        # \u767b\u5f55\u63a5\u53e3\u7684 URL\n        url = 'https://angelapi.bluemoon.com.cn/portal-admin/repositoryFile/getUserInfo'\n        # \u6784\u9020\u8bf7\u6c42\u6570\u636e\n        payload = {\n        }\n    \n        # \u53d1\u9001 POST \u8bf7\u6c42\n        response = requests.post(url, json=payload)\n    \n        # \u68c0\u67e5\u54cd\u5e94\u72b6\u6001\u7801\n        assert response.status_code == 200\n    \n        # \u89e3\u6790 JSON \u54cd\u5e94\n>       data = response.json()\n\nbackend\\case\\test_getUserInfo.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [200]>, kwargs = {}, encoding = 'utf-8'\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n>                   raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE                   requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nC:\\Users\\Login\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\requests\\models.py:971: JSONDecodeError"}, "teardown": {"name": "teardown", "duration": 0.0002261999761685729, "outcome": "passed"}, "outcome": "failed"}], "summary": {"failed": 1, "num_tests": 1, "duration": 0.677483081817627}, "created_at": "2024-10-18 09:30:45.449538"}}